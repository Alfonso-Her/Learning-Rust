From chapter 1:

- The convention for more of one word file name is to use _
- Compile with rustc filename.rs
- To declare a function we use fn, and there is and special function "main(Optional_parameters_here)" which is always executed first
- The main fuction can have a void return.
- Rust needs to wrapped function bodies inside {}, following good stayles the brackets opens in the same line as the function declaration
- There is a code formatter tool inside rust (Appendix D).

- Studying the line println!("Hello, world!"); we have:
    - when calling println!, we are calling a Rust macro?, (Don't know what a Rust macro is but the docu promise to add data at chapter 20)
    - for now we just know that ! calls a macro not a normal rust function

- The file "file_name.pdb" is only generated while working inside a windows os (as I am currently doing), in other OS there is only a "file_name" executable

- See that Rust is ahead-of-time compiled language

-.- Hello, Cargo!

- Cargo helps downloding the libraries required and then building the program
- libraries requiered by the proyect are called dependencies
- Cargo is used as predefined, so to compile we don't use rustc, instead we create a cargo proyect:
    - cargo new name_of_the_proyect this will create a new folder in the path specified in the name of the proyect
    - By default cargo initialized a new Git repository, this can be prevent by starting a proyect inside a repository overriding this behaviour with cargo new --vcs=Git, 
    - To display all the options use cargo new --help

- Cargo sections are initialized using [], now we get to know [package], [dependencies]
- editon option while be discussed later (Appendix E)
- In Rust packages are name crates
- Cargo expects:
    - all the source code inside src
    - The top-level project is just for README, licence and cofig files, or other files not related to rust code

- building with cargo:
    - to build, just make cargo build on the top-level folder this generate a .exe inside target\\debug\\file_name.exe
    - The first build will generate a .lock file used to track version on the dependencies it is automatically updated by cargo (in theory, I want to see this working on a big proyect)
    - Cargo run compile and run the debug .exe, Cargo only compile the code when a change happend
    - cargo check make cargo to test if our code is compilable without the whole compile process
    - To build a release just add the flag --release to the build command cargo build --release, this will generate a target\\release

From chapter 2: (Fast notes)

- We import io (input/output) library from std.
- The std library (prelude) has its own documentation may be worth to read it.
- let statement creates variables
- Variables are immutable by defailt!!! will come back later on to that.
- Variables can be mutable if we add te word mut before them
- comments //
- to use function that are associated to types we use :: as conector, ex: String::new()
- In full, the let mut guess = String::new(); line has created a mutable variable that is currently bound to a new, empty instance of a String.

- Receiving user input:
- we use io::stdin() because we start the file with use std::io, instead we can do std::io::stdin, this will return an instance of std::io::Stdin
- The read_line methos called using . transforme the the user input into a String and append it to the Optional_parameters_here
- See that the parameter must be a mutable variable because read_line is going to modify it.
- Similar to c++, & is used to pass something as reference, which prevents unecesaries copies of the varible in memory
- References can be mutable too so to generare a mutable reference we use &mut

- read_line also returns a Result value which is a enumeration (enum) in this case to handle errors
- This instance of Result has a expect function that verify if the enum return by read_line is ok or err
- rust warn the developer when a potencial error is not handle.
- with ecxpect we stop the execution if an error happens

- Generating a Secret Number

- We are going to use the rand crate (library) to generate random numbers
- The specifier 0.8.5 is actually shorthand for ^0.8.5, which means any version that is at least 0.8.5 but below 0.9.0
- Cargo understands Semantic Versioning
- use rand::Rng where Rng is a trait
- Some of the fuction of the example were depecrated so I change them
- to define a range expression we can use start..=end
- IMPORTANT to know which traits, methods and function are abailable inside a crate use cargo doc --open
- Whow that is amazing it generate a web with the documetation of the proyect including crates
- The match expression is powerfull and in the example is a bit difficult to understand I am sure it will shows again.
- rust has a strong static type system
- in rust there are unsigned numbers
- Rust allows us to do shadowing to variables changing the type of a variable witout creating 2 variables
- I belive that I do not understand match at all...



 From chapter 3:
*_* Intro
- There are constants and they are different of a not mutable variable.
- Costants needs to be typed in their declaration, with theirs name in uppercase with underscores
- In order to make a variable shadowed just use let and reasign the value , ex: let y = 1; let y = y + 1 ;
- take care let only works inside the same scope 
- let can change the type of a variable, a mutable variable can't directly 

*_* Data types
- Rust MUST know the types of all the variables at compile time.
- If we use a function to change the type such as .parse() we have to indicate the type

- Scalar Types:{Interger, floating-point, numbers,Booleans, characters}
    - Interger:
        - is a number without a fractional component.
        - i signed, u unsigned (negative or not)
        - 8-bit to 128-bit all the 8 mult
        - Each signed variant can store numbers from −(2**(n − 1)) to 2**(n − 1) − 1 inclusive
        - Unsigned variant can store from 0 to 2**n -1
        - isize and usize depend on the architecture
        - Rust supporst Decimal, hex,Octal,binary...
        - JAJAJAJA if you make and error like a interger Overflow Rust literally just panick at runtime!
        - To prevent interger Overflow rust has some solutions: wrap in all modes; return None value if there is overflow; return the value and a Boolean; or saturate at the value's minimum or maximim values with saturating_*
    
    - Floating-Point Types
        - There are to floating-point types f32 and f64
        - The default one is f64
        - all floating types are singed
    
    - Numeric Operations 
        -addition, subtraction, multiplication, division, and remainder. Integer division truncates toward zero to the nearest integer.
    
    - Boolean type;

    - Char type
        - You can use emotes wtf
        - four bytes Unicode Scalar Value
    
    - Compound Types
        - Tuples type
            - groups a number of values with  a variety of types into one compound type
            - ex: let tup: (i32,f32, u8) = (500, 4.5, 2);
            - you can change only some types using for example (i21,_,_)
        
        - Arrays
            - All the elements have the same type
            - Fixed length
            - The docu says: Arrays are useful when you want your data allocated on the stack, the same as the other types we have seen so far, rather than the heap
                - I don't understand what that mean, will be discuss in the Chapter 4
            - There are vectors, provided by std, with unfixed length
            - ex: 
                - let a :[i32,5] = [2,3,4,5,1];
                - let b : [2,4] = [2,2,2,2];
            - To acces just use a[i] with 0<=i<=n-1 (n is fixed)

- Functions:

- Initialized with fn and use snake case as conventional style (minus + _)
- functions have parameters, special variable that are part of the function's signature
- Tecnically, the concrete values fixed on the call of a function are named arguments
- On the function signature must appear the type of the parameters

    -Statments and Expressions:
        - Statments are instructions that perform some action and do not return a value.
        - Expressions evaluate to a resultat value.

        - Example of statments => fn main{let y = 3;}
        - fuction definitions are also statements, the entire preceding example is a statement in itself.
        - statements do not return values, ok I think I get it.
        - The example in the book is something like let x = (let y = 0); which gives a error because let y = 0 don't return anything

        - Expressions evaliate to a a value.
        - Example: 5+6.
        - Expressions can be inside statement, ex : in the statement let y = 6; is an expression that evaluates to the value 6
        - calling a function, macro is an expression 
        - A block of code inside {} is an expression
        - Expressions do not include ending semicolons. If you add a semicolon to the end of an expression, you turn it into a statement!!!!!
        - Take care with the ; you can not place them without thinking!!
        - To sum up and simplifing the logic, just do not place a ; to return a value
        - I chew on the explample and manage to place a println! inside the scope that change the value of x
            - I saw that even when the x is not mutable the scope can return a transformation of the variable
    
    - In the signature of a function that returns things we declare the return type using -> same as python
    - In Rust, the return value of the function is synonymous with the value of the final expression in the block of the body of a function
    - If you place a ; at the end of a function (not returning anything) you would get a mismatched types error

- Comments : // and will read more about them in the chapter 14

- Control Flow.
- Basically we want to make if-else and whiles.

- if Expressions
    - At a first glance is similar to python but with the {}
    - Blocks of code associated by a condition are sometimes called arms like we made with the match
    - I am skipping most of the information mainly because it is the same as other languages
    - Rust does not try to automatically convert the type of the condition to a Boolean type instead it throws an error
    - There are more powerfull expressions that else if, such as match will expand this information in chapter 6
    - See that because if is an Expression we can use it in the assign of something with let, ex : let number = if condition {3} else {5};
        - Rust check if both arms have the same type

- Loops

    - loop: is a while true
    - we have break, continue keyword
    - we can use break as a return for the loop, ex: break contador * 2;
    - we can also use return but it will end the function

- Loops Labels
    - we can "name/mark" a loop to make break and continue only inside it, the examples is clear
    - to add a label just place a snake case name before the keyword loop and place in between a : 

- While condition {}
    - It is the same as always
    - Can be replicated with loop, conditions, breaks and if-else

- for is the same that python but with {}
    - for element in array
    - is more safe than while to loop through a collection, (no index problem)
    - for is the most recommendable way to looping
    - See that to generate a range we can just use (a..b) and will generate (a+1,...b)